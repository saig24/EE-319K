


ARM Macro Assembler    Page 1 


    1 00000000         ; LCD.s
    2 00000000         ; Student names: change this to your names or look very 
                       silly
    3 00000000         ; Last modification date: change this to the last modifi
                       cation date or look very silly
    4 00000000         
    5 00000000         ; Runs on LM4F120/TM4C123
    6 00000000         ; Use SSI0 to send an 8-bit code to the ST7735 160x128 p
                       ixel LCD.
    7 00000000         
    8 00000000         ; As part of Lab 7, students need to implement these LCD
                       _WriteCommand and LCD_WriteData
    9 00000000         ; This driver assumes two low-level LCD functions
   10 00000000         
   11 00000000         ; Backlight (pin 10) connected to +3.3 V
   12 00000000         ; MISO (pin 9) unconnected
   13 00000000         ; SCK (pin 8) connected to PA2 (SSI0Clk)
   14 00000000         ; MOSI (pin 7) connected to PA5 (SSI0Tx)
   15 00000000         ; TFT_CS (pin 6) connected to PA3 (SSI0Fss)
   16 00000000         ; CARD_CS (pin 5) unconnected
   17 00000000         ; Data/Command (pin 4) connected to PA6 (GPIO)
   18 00000000         ; RESET (pin 3) connected to PA7 (GPIO)
   19 00000000         ; VCC (pin 2) connected to +3.3 V
   20 00000000         ; Gnd (pin 1) connected to ground
   21 00000000         
   22 00000000 40004100 
                       DC      EQU              0x40004100
   23 00000000 00000000 
                       DC_COMMAND
                               EQU              0
   24 00000000 00000040 
                       DC_DATA EQU              0x40
   25 00000000 40008008 
                       SSI0_DR_R
                               EQU              0x40008008
   26 00000000 4000800C 
                       SSI0_SR_R
                               EQU              0x4000800C
   27 00000000 00000004 
                       SSI_SR_RNE
                               EQU              0x00000004  ; SSI Receive FIFO 
                                                            Not Empty
   28 00000000 00000010 
                       SSI_SR_BSY
                               EQU              0x00000010  ; SSI Busy Bit
   29 00000000 00000002 
                       SSI_SR_TNF
                               EQU              0x00000002  ; SSI Transmit FIFO
                                                             Not Full
   30 00000000         
   31 00000000                 EXPORT           writecommand
   32 00000000                 EXPORT           writedata
   33 00000000         
   34 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   35 00000000                 THUMB
   36 00000000                 ALIGN
   37 00000000         
   38 00000000         ; The Data/Command pin must be valid when the eighth bit



ARM Macro Assembler    Page 2 


                        is
   39 00000000         ; sent.  The SSI module has hardware input and output FI
                       FOs
   40 00000000         ; that are 8 locations deep.  Based on the observation t
                       hat
   41 00000000         ; the LCD interface tends to send a few commands and the
                       n a
   42 00000000         ; lot of data, the FIFOs are not used when writing
   43 00000000         ; commands, and they are used when writing data.  This
   44 00000000         ; ensures that the Data/Command pin status matches the b
                       yte
   45 00000000         ; that is actually being transmitted.
   46 00000000         ; The write command operation waits until all data has b
                       een
   47 00000000         ; sent, configures the Data/Command pin for commands, se
                       nds
   48 00000000         ; the command, and then waits for the transmission to
   49 00000000         ; finish.
   50 00000000         ; The write data operation waits until there is room in 
                       the
   51 00000000         ; transmit FIFO, configures the Data/Command pin for dat
                       a,
   52 00000000         ; and then adds the data to the transmit FIFO.
   53 00000000         ; NOTE: These functions will crash or stall indefinitely
                        if
   54 00000000         ; the SSI0 module is not initialized and enabled.
   55 00000000         
   56 00000000         ; This is a helper function that sends an 8-bit command 
                       to the LCD.
   57 00000000         ; Input: R0  8-bit command to transmit
   58 00000000         ; Output: none
   59 00000000         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   60 00000000         writecommand
   61 00000000         ;; --UUU-- Code to write a command to the LCD
   62 00000000         loop
   63 00000000 4A14            LDR              R2, =SSIO_SR_R ;1) Read SSI0_SR
                                                            _R and check bit 4,
                                                            
   64 00000002 6811            LDR              R1, [R2]    ;
   65 00000004 EA4F 1111       LSR              R1, #4      ; RIGHT SHIFT 4 TIM
                                                            ES
   66 00000008 F001 0101       AND              R1, #0x01   ;MASKING
   67 0000000C 2901            CMP              R1, #1      ;2) If bit 4 is hig
                                                            h, loop back to ste
                                                            p 1 (wait for BUSY 
                                                            bit to be low)
   68 0000000E D0F7            BEQ              loop        ; branch if r1 = 1
   69 00000010 4A10            LDR              R2, =GPIO_PORTA_DATA_R ;3) Clea
                                                            r D/C=PA6 to zero
   70 00000012 6811            LDR              R1, [R2]
   71 00000014 F001 01BF       AND              R1, #0xBF   ; 1011 1111 clears 
                                                            pa6
   72 00000018 6011            STR              R1,[R2]
   73 0000001A 4A0E            LDR              R2, =SSIO_DR_R ;4) Write the co
                                                            mmand to SSI0_DR_R
   74 0000001C 6811            LDR              R1, [R2]
   75 0000001E 4601            MOV              R1, R0
   76 00000020 6011            STR              R1,[R2]



ARM Macro Assembler    Page 3 


   77 00000022         loop1
   78 00000022 4A0C            LDR              R2, =SSIO_SR_R ;5) Read SSI0_SR
                                                            _R and check bit 4,
                                                            
   79 00000024 6811            LDR              R1, [R2]
   80 00000026 EA4F 1111       LSR              R1, #4
   81 0000002A F001 0101       AND              R1, #0x01   ; MASKING
   82 0000002E 2901            CMP              R1, #1      ;6) If bit 4 is hig
                                                            h, loop back to ste
                                                            p 5 (wait for BUSY 
                                                            bit to be low)
   83 00000030 D0F7            BEQ              loop1
   84 00000032 4770            BX               LR          ;   return
   85 00000034         
   86 00000034         ; This is a helper function that sends an 8-bit data to 
                       the LCD.
   87 00000034         ; Input: R0  8-bit data to transmit
   88 00000034         ; Output: none
   89 00000034         ; Assumes: SSI0 and port A have already been initialized
                        and enabled
   90 00000034         writedata
   91 00000034         ;; --UUU-- Code to write data to the LCD
   92 00000034         loop2
   93 00000034 4A07            LDR              R2, =SSIO_SR_R ;1) Read SSI0_SR
                                                            _R and check bit 1,
                                                             
   94 00000036 6811            LDR              R1, [R2]
   95 00000038 EA4F 0151       LSR              R1, #1
   96 0000003C F001 0101       AND              R1, #0x01
   97 00000040 2901            CMP              R1, #1      ;2) If bit 1 is low
                                                             loop back to step 
                                                            1 (wait for TNF bit
                                                             to be high)
   98 00000042 D0F7            BEQ              loop2
   99 00000044 4A03            LDR              R2, =GPIO_PORTA_DATA_R ;3) Set 
                                                            D/C=PA6 to one
  100 00000046 6811            LDR              R1, [R2]
  101 00000048         ; ORR R1, =DC_DATA; 0100 0000 -- 0x40
  102 00000048 6011            STR              R1, [R2]
  103 0000004A 4A02            LDR              R2, =SSIO_DR_R ;4) Write the 8-
                                                            bit data to SSI0_DR
                                                            _R
  104 0000004C 6811            LDR              R1, [R2]
  105 0000004E 4601            MOV              R1, R0
  106 00000050 6011            STR              R1, [R2]
  107 00000052 4770            BX               LR          ;   return
  108 00000054         
  109 00000054         
  110 00000054         ;***************************************************
  111 00000054         ; This is a library for the Adafruit 1.8" SPI display.
  112 00000054         ; This library works with the Adafruit 1.8" TFT Breakout
                        w/SD card
  113 00000054         ; ----> http://www.adafruit.com/products/358
  114 00000054         ; as well as Adafruit raw 1.8" TFT display
  115 00000054         ; ----> http://www.adafruit.com/products/618
  116 00000054         ;
  117 00000054         ; Check out the links above for our tutorials and wiring
                        diagrams
  118 00000054         ; These displays use SPI to communicate, 4 or 5 pins are



ARM Macro Assembler    Page 4 


                        required to
  119 00000054         ; interface (RST is optional)
  120 00000054         ; Adafruit invests time and resources providing this ope
                       n source code,
  121 00000054         ; please support Adafruit and open-source hardware by pu
                       rchasing
  122 00000054         ; products from Adafruit!
  123 00000054         ;
  124 00000054         ; Written by Limor Fried/Ladyada for Adafruit Industries
                       .
  125 00000054         ; MIT license, all text above must be included in any re
                       distribution
  126 00000054         ;****************************************************
  127 00000054         
  128 00000054                 ALIGN                        ; make sure the end
                                                             of this section is
                                                             aligned
  129 00000054                 END                          ; end of file
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\lcd.d 
-o.\lcd.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\
Luminary --predefine="__MICROLIB SETA 1" --list=.\lcd.lst LCD.s
